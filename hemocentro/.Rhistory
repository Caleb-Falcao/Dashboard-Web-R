dados_total = read_excel("C:\\projetoR\\dados_sangue.xlsx", sheet = "total",col_names = FALSE)
library(readxl)
library(DescTools)
library(forecast)
library(ggplot2)
library(urca)
library(lmtest)
library(seasonal)
library(seasonalview)
library(dplyr)
library(tsibble)
library(feasts)
library(shiny)
dados_total = read_excel("C:\\projetoR\\dados_sangue.xlsx", sheet = "total",col_names = FALSE)
mytsTotal = ts(dados_total, start = c(2020,6), end = c(2021,6), frequency = 12)
mytsTotal
autoplot(mytsTotal, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsTotal)
summary(mytsTotal)
dados_aferese = read_excel("C:\\projetoR\\dados_sangue.xlsx", sheet = "aferese",col_names = FALSE)
mytsaferese = ts(dados_aferese, start = c(2020,6), end = c(2022,6), frequency = 12)
mytsaferese
autoplot(mytsaferese, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsaferese)
install.packages("forecast")
install.packages("ggplot2")
install.packages("urca")
install.packages("lmtest")
install.packages("seasonal")
install.packages("seasonalview")
install.packages("readxl")
install.packages("DescTools")
install.packages("dplyr")
install.packages("tsibble")
install.packages("feasts")
#adicionei o framework shiny
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(readxl)
library(DescTools)
library(forecast)
library(ggplot2)
library(urca)
library(lmtest)
library(seasonal)
library(seasonalview)
library(dplyr)
library(tsibble)
library(feasts)
library(shiny)
dados_total = read_excel("C:\\projetoR\\dados_sangue.xlsx", sheet = "total",col_names = FALSE)
mytsTotal = ts(dados_total, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsTotal
autoplot(mytsTotal, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsTotal)
summary(mytsTotal)
dados_aferese = read_excel("C:\\projetoR\\dados_sangue.xlsx", sheet = "aferese",col_names = FALSE)
mytsaferese = ts(dados_aferese, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsaferese
autoplot(mytsaferese, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsaferese)
############################ FIM INICIALIZAÇÃO DAS SÉRIES TEMPORAIS ############
############################ ANÁLISE EXPLORATÓRIA ##############################
split.screen(figs=c(1,2))
screen(1)
plot(mytsTotal, main = "Bolsas sangue Total", xlab = "Tempo", ylab = "Nº de bolsas total")
screen(2)
plot(mytsaferese, main = "Bolsas sangue Aférese", xlab = "Tempo", ylab = "Nº de bolsas aférese")
close.screen(all=T)
autoplot(mstl(mytsTotal))
autoplot(mstl(mytsaferese))
plot(mstl(mytsTotal), main = "Decomposição série sangue total")
plot(mstl(mytsaferese), main = "Decomposição série sangue aférese")
summary(mytsTotal)
summary(mytsaferese)
############################ FIM ANÁLISE EXPLORATÓRIA ##########################
############################ DEFINIÇÃO TREINO TESTE ############################
TotalMeses = 96
TotalMesesTreino = ceiling(0.8*TotalMeses)
TotalMesesTeste = TotalMeses - TotalMesesTreino
treinoSangueTotal = window(mytsTotal, start = c(2014,1),end=c(2020,5))
treinoSangueTotal
testeSangueTotal = window(mytsTotal, start = c(2020,6), end = c(2021,12))
testeSangueTotal
############################ FIM DEFINIÇÃO TREINO TESTE ########################
############################ GERAÇÃO DOS MODELOS ###############################
mdlTreinoSangueTotalRL = tslm(treinoSangueTotal ~ season + trend, data=treinoSangueTotal)
print(mdlTreinoSangueTotalRL)
mdlTreinoSangueTotalArima = auto.arima(treinoSangueTotal, trace=T,stepwise = F, approximation = F)
print(mdlTreinoSangueTotalArima)
prevTreinoSangueTotalSTFL = stlf(treinoSangueTotal, h=19)
print(prevTreinoSangueTotalSTFL$model)
#autoplot(prevTreinoSangueTotalSTFL$model)
prevTreinoSangueTotalhwAdditive = hw(treinoSangueTotal, seasonal = "additive", h=TotalMesesTeste)
print(prevTreinoSangueTotalhwAdditive$model)
prevTreinoSangueTotalhwMultiplicative = hw(treinoSangueTotal, seasonal = "multiplicative", h=TotalMesesTeste)
print(prevTreinoSangueTotalhwMultiplicative$model)
mdlTreinoSangueTotalNNETAR = nnetar(treinoSangueTotal)
############################ FIM GERAÇÃO DOS MODELOS ###########################
############################ VERIFICAÇÃO MODELO AJUSTADO #######################
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
library(shiny)
# Define UI ----
ui <- fluidPage(
navbarPage(
title = "My Shiny App",
tabPanel(
"Titles",
sidebarLayout(
sidebarPanel(),
mainPanel(
h1("First level title"),
h2("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title")
)
)
),
tabPanel("Other Tab")  # Pode adicionar mais abas conforme necessário
)
)
library(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
##########
library(shiny)
# Define UI ----
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
h1("First level title"),
h2("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
# Define UI ----
ui <- fluidPage(
titlePanel("My Shiny App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
h1("First level title"),
h2("Second level title"),
h3("Third level title"),
h4("Fourth level title"),
h5("Fifth level title")
)
)
)
# Define server logic ----
server <- function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny); runApp('C:/Users/caleb/OneDrive/Área de Trabalho/COISAS ALEATORIAS/testeshiny/dashboard_web.R')
runApp('C:/Users/caleb/OneDrive/Área de Trabalho/COISAS ALEATORIAS/testeshiny/dashboard_web.R')
runApp('C:/Users/caleb/OneDrive/Área de Trabalho/COISAS ALEATORIAS/testeshiny/dashboard_web.R')
runApp('C:/Users/caleb/OneDrive/Área de Trabalho/COISAS ALEATORIAS/testeshiny/dashboard_web.R')
library(shiny); runApp('C:/Users/caleb/OneDrive/Área de Trabalho/COISAS ALEATORIAS/testeshiny/dashboard_web.R')
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny); runApp('C:/Users/caleb/OneDrive/Área de Trabalho/COISAS ALEATORIAS/testeshiny/dashboard_web.R')
shiny::runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
shiny::runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
shiny::runApp('C:/tcc_dashboard/hemocentro')
shiny::runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
shiny::runApp('C:/tcc_dashboard/hemocentro')
.libPaths()
check()
check_built()
.check_built()
devtools::check()
devtools:check()
devtools:check()
devtools::check()
runApp('C:/tcc_dashboard/hemocentro')
devtools::check()
devtools::check()
devtools::check()
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
runApp('C:/tcc_dashboard/hemocentro')
shiny::runApp('C:/tcc_dashboard/hemocentro')
runApp('E:/2024/Dashboard-Web-R/hemocentro')
runApp('E:/2024/Dashboard-Web-R/hemocentro')
runApp('E:/2024/Dashboard-Web-R/hemocentro')
runApp('E:/2024/Dashboard-Web-R/hemocentro')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
autoplot(treinoTotal) +
autolayer(testeTotal, series = "TESTE")
library(readxl)
library(DescTools)
library(forecast)
library(ggplot2)
library(urca)
library(lmtest)
library(seasonal)
library(seasonalview)
library(dplyr)
library(tsibble)
library(feasts)
############################ DASHBOARD WEB SHINY ###############################
############################ FIM DASHBOARD WEB SHINY ###########################
############################ INICIALIZAÇÃO DAS SÉRIES TEMPORAIS ################
dados_total = read_excel("C:\\projetoR\\dados_sangue.xlsx", sheet = "total",col_names = FALSE)
mytsTotal = ts(dados_total, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsTotal
autoplot(mytsTotal, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsTotal)
summary(mytsTotal)
dados_aferese = read_excel("C:\\projetoR\\dados_sangue.xlsx", sheet = "aferese",col_names = FALSE)
mytsaferese = ts(dados_aferese, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsaferese
autoplot(mytsaferese, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsaferese)
split.screen(figs=c(1,2))
screen(1)
plot(mytsTotal, main = "Bolsas sangue Total", xlab = "Tempo", ylab = "Nº de bolsas total")
screen(2)
plot(mytsaferese, main = "Bolsas sangue Aférese", xlab = "Tempo", ylab = "Nº de bolsas aférese")
close.screen(all=T)
autoplot(mstl(mytsTotal))
autoplot(mstl(mytsaferese))
plot(mstl(mytsTotal), main = "Decomposição série sangue total")
plot(mstl(mytsaferese), main = "Decomposição série sangue aférese")
summary(mytsTotal)
summary(mytsaferese)
TotalMeses = 96
TotalMesesTreino = ceiling(0.8*TotalMeses)
TotalMesesTeste = TotalMeses - TotalMesesTreino
treinoSangueTotal = window(mytsTotal, start = c(2014,1),end=c(2020,5))
treinoSangueTotal
testeSangueTotal = window(mytsTotal, start = c(2020,6), end = c(2021,12))
testeSangueTotal
mdlTreinoSangueTotalRL = tslm(treinoSangueTotal ~ season + trend, data=treinoSangueTotal)
print(mdlTreinoSangueTotalRL)
mdlTreinoSangueTotalArima = auto.arima(treinoSangueTotal, trace=T,stepwise = F, approximation = F)
print(mdlTreinoSangueTotalArima)
prevTreinoSangueTotalSTFL = stlf(treinoSangueTotal, h=19)
print(prevTreinoSangueTotalSTFL$model)
#autoplot(prevTreinoSangueTotalSTFL$model)
prevTreinoSangueTotalhwAdditive = hw(treinoSangueTotal, seasonal = "additive", h=TotalMesesTeste)
print(prevTreinoSangueTotalhwAdditive$model)
prevTreinoSangueTotalhwMultiplicative = hw(treinoSangueTotal, seasonal = "multiplicative", h=TotalMesesTeste)
print(prevTreinoSangueTotalhwMultiplicative$model)
mdlTreinoSangueTotalNNETAR = nnetar(treinoSangueTotal)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
shapiro.test(mdlTreinoSangueTotalArima$residuals)
shapiro.test(mdlTreinoSangueTotalRL$residuals)
shapiro.test(prevTreinoSangueTotalSTFL$residuals)
checkresiduals(mdlTreinoSangueTotalArima)
checkresiduals(mdlTreinoSangueTotalRL)
checkresiduals(prevTreinoSangueTotalSTFL$model)
prevTreinoSangueTotalRL = forecast(mdlTreinoSangueTotalRL, h=TotalMesesTeste)
prevTreinoSangueTotalArima = forecast(mdlTreinoSangueTotalArima, h=TotalMesesTeste)
prevTreinoSangueTotalNNETAR = forecast(mdlTreinoSangueTotalNNETAR, h=TotalMesesTeste)
accuracy(testeSangueTotal, prevTreinoTotalRL$mean)
prevTreinoSangueTotalRL = forecast(mdlTreinoSangueTotalRL, h=TotalMesesTeste)
prevTreinoSangueTotalArima = forecast(mdlTreinoSangueTotalArima, h=TotalMesesTeste)
prevTreinoSangueTotalNNETAR = forecast(mdlTreinoSangueTotalNNETAR, h=TotalMesesTeste)
accuracy(testeSangueTotal, prevTreinoTotalRL$mean)
autoplot(treinoTotal) +
autolayer(testeTotal, series = "TESTE")
autoplot(treinoTotal) +
autolayer(testeTotal, series = "TESTE")
autoplot(treinoSangueTotal, main = "Modelos ajustados") +
autolayer(mdlTreinoSangueTotalRL$fitted.values, series="TSLM") +
autolayer(mdlTreinoSangueTotalArima$fitted, series="ARIMA") +
autolayer(prevTreinoSangueTotalSTFL$model$fitted, series="ETS(M,N,N)") +
ggtitle("PREVISÕES COM AUTOPLOT E AUTOLAYER") +
xlab("Tempo") + ylab("Nº de bolsas")
plot(treinoSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas",col = "black")
lines(mdlTreinoSangueTotalRL$fitted.values, col="red")
lines(mdlTreinoSangueTotalArima$fitted, col="blue")
lines(prevTreinoSangueTotalSTFL$model$fitted, col="green")
legend("topright", legend = c("Real", "TSLM","ARIMA(0,1,2)","ETS(M,N,N)"), col = c("black","red","blue","green"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(treinoSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas",col = "black")
lines(mdlTreinoSangueTotalRL$fitted.values, col="red")
legend("topright", legend = c("Real", "TSLM"), col = c("black","red"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(treinoSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas",col = "black")
lines(mdlTreinoSangueTotalArima$fitted, col="blue")
legend("topright", legend = c("Real","ARIMA(0,1,2)"), col = c("black","blue"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(treinoSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas",col = "black")
lines(prevTreinoSangueTotalSTFL$model$fitted, col="green")
legend("topright", legend = c("Real","ETS(M,N,N)"), col = c("black","green"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(testeSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas", col = "black")
lines(prevTreinoSangueTotalRL$mean, col="red")
lines(prevTreinoSangueTotalArima$mean, col="blue")
lines(prevTreinoSangueTotalSTFL$mean, col="green")
legend("topright", legend = c("Real", "TSLM","ARIMA(0,1,2)","ETS(M,N,N)"), col = c("black","red","blue","green"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(testeSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas", col = "black")
lines(prevTreinoSangueTotalRL$mean, col="red")
legend("topright", legend = c("Real", "TSLM"), col =  c("black","red"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(testeSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas", col = "black")
lines(prevTreinoSangueTotalArima$mean, col="blue")
legend("topright", legend = c("Real","ARIMA(0,1,2)"), col = c("black","blue"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(testeSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas", col = "black")
lines(prevTreinoSangueTotalSTFL$mean, col="blue")
legend("topright", legend = c("Real","ETS(M,N,N)"), col = c("black","blue"), lty = 1:1,cex=0.8)
close.screen(all=T)
cores <- c("green","red")
autoplot(prevTreinoSangueTotalSTFL)
plot(prevTreinoSangueTotalSTFL, main = "Suavização exponencial - ETS(M,N,N)",
xlab = "Tempo",
ylab = "Nº de bolsas sangue total",
las = 1)
summary(prevTreinoSangueTotalRL$model)$adj.r.squared
summary(prevTreinoSangueTotalSTFL$model)$adj.r.squared
summary(prevTreinoSangueTotalArima$model)$adj.r.squared
stlTreinoSangueTotal = stl(treinoSangueTotal[,1], s.window = "periodic")
plot(stlTreinoSangueTotal)
stlTreinoSangueTotal
summary(prevTreinoSangueTotalRL$model)$adj.r.squared
stlTreinoSangueTotal = stl(treinoSangueTotal[,1], s.window = "periodic")
plot(stlTreinoSangueTotal)
stlTreinoSangueTotal
cores <- c("green","red")
autoplot(prevTreinoSangueTotalSTFL)
plot(prevTreinoSangueTotalSTFL, main = "Suavização exponencial - ETS(M,N,N)",
xlab = "Tempo",
ylab = "Nº de bolsas sangue total",
las = 1)
cores <- c("green","red")
autoplot(prevTreinoSangueTotalSTFL)
autoplot(prevTreinoSangueTotalSTFL)
runApp()
runApp()
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
split.screen(figs=c(1,2))
screen(1)
plot(mytsTotal, main = "Bolsas sangue Total", xlab = "Tempo", ylab = "Nº de bolsas total")
screen(2)
plot(mytsaferese, main = "Bolsas sangue Aférese", xlab = "Tempo", ylab = "Nº de bolsas aférese")
close.screen(all=T)
autoplot(mstl(mytsTotal))
autoplot(mstl(mytsaferese))
plot(mstl(mytsTotal), main = "Decomposição série sangue total")
plot(mstl(mytsaferese), main = "Decomposição série sangue aférese")
summary(mytsTotal)
summary(mytsaferese)
TotalMeses = 96
TotalMesesTreino = ceiling(0.8*TotalMeses)
TotalMesesTeste = TotalMeses - TotalMesesTreino
treinoSangueTotal = window(mytsTotal, start = c(2014,1),end=c(2020,5))
treinoSangueTotal
testeSangueTotal = window(mytsTotal, start = c(2020,6), end = c(2021,12))
testeSangueTotal
mdlTreinoSangueTotalRL = tslm(treinoSangueTotal ~ season + trend, data=treinoSangueTotal)
print(mdlTreinoSangueTotalRL)
mdlTreinoSangueTotalArima = auto.arima(treinoSangueTotal, trace=T,stepwise = F, approximation = F)
print(mdlTreinoSangueTotalArima)
prevTreinoSangueTotalSTFL = stlf(treinoSangueTotal, h=19)
print(prevTreinoSangueTotalSTFL$model)
#autoplot(prevTreinoSangueTotalSTFL$model)
prevTreinoSangueTotalhwAdditive = hw(treinoSangueTotal, seasonal = "additive", h=TotalMesesTeste)
print(prevTreinoSangueTotalhwAdditive$model)
prevTreinoSangueTotalhwMultiplicative = hw(treinoSangueTotal, seasonal = "multiplicative", h=TotalMesesTeste)
print(prevTreinoSangueTotalhwMultiplicative$model)
mdlTreinoSangueTotalNNETAR = nnetar(treinoSangueTotal)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
dados_total = read_excel("C:\\projetoR\\dados_sangue.xlsx", sheet = "total",col_names = FALSE)
mytsTotal = ts(dados_total, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsTotal
autoplot(mytsTotal, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsTotal)
summary(mytsTotal)
runApp()
library(readxl)
library(readxl)
library(DescTools)
library(forecast)
library(ggplot2)
library(urca)
library(lmtest)
library(seasonal)
library(seasonalview)
library(dplyr)
library(tsibble)
library(feasts)
dados_total = read_excel("dados_sangue.xlsx", sheet = "total",col_names = FALSE)
mytsTotal = ts(dados_total, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsTotal
autoplot(mytsTotal, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsTotal)
summary(mytsTotal)
boxplot(mytsTotal)
summary(mytsTotal)
dados_aferese = read_excel("dados_sangue.xlsx", sheet = "aferese",col_names = FALSE)
mytsaferese = ts(dados_aferese, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsaferese
autoplot(mytsaferese, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsaferese)
dados_total = read_excel("dados_sangue.xlsx", sheet = "total",col_names = FALSE)
mytsTotal = ts(dados_total, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsTotal
autoplot(mytsTotal, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsTotal)
summary(mytsTotal)
dados_aferese = read_excel("dados_sangue.xlsx", sheet = "aferese",col_names = FALSE)
mytsaferese = ts(dados_aferese, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsaferese
autoplot(mytsaferese, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsaferese)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
