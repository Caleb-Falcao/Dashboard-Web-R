runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(readxl)
dados_total = read_excel("C:\\projetoR\\dados_sangue.xlsx", sheet = "total",col_names = FALSE)
mytsTotal = ts(dados_total, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsTotal
autoplot(mytsTotal, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsTotal)
summary(mytsTotal)
dados_aferese = read_excel("C:\\projetoR\\dados_sangue.xlsx", sheet = "aferese",col_names = FALSE)
mytsaferese = ts(dados_aferese, start = c(2014,1), end = c(2021,12), frequency = 12)
mytsaferese
autoplot(mytsaferese, ylab = "Nº de bolsas", xlab = "Tempo")
boxplot(mytsaferese)
runApp()
TotalMeses = 96
TotalMesesTreino = ceiling(0.8*TotalMeses)
TotalMesesTeste = TotalMeses - TotalMesesTreino
treinoSangueTotal = window(mytsTotal, start = c(2014,1),end=c(2020,5))
treinoSangueTotal
testeSangueTotal = window(mytsTotal, start = c(2020,6), end = c(2021,12))
testeSangueTotal
mdlTreinoSangueTotalRL = tslm(treinoSangueTotal ~ season + trend, data=treinoSangueTotal)
print(mdlTreinoSangueTotalRL)
mdlTreinoSangueTotalArima = auto.arima(treinoSangueTotal, trace=T,stepwise = F, approximation = F)
print(mdlTreinoSangueTotalArima)
prevTreinoSangueTotalSTFL = stlf(treinoSangueTotal, h=19)
print(prevTreinoSangueTotalSTFL$model)
#autoplot(prevTreinoSangueTotalSTFL$model)
prevTreinoSangueTotalhwAdditive = hw(treinoSangueTotal, seasonal = "additive", h=TotalMesesTeste)
print(prevTreinoSangueTotalhwAdditive$model)
prevTreinoSangueTotalhwMultiplicative = hw(treinoSangueTotal, seasonal = "multiplicative", h=TotalMesesTeste)
print(prevTreinoSangueTotalhwMultiplicative$model)
mdlTreinoSangueTotalNNETAR = nnetar(treinoSangueTotal)
View(mdlTreinoSangueTotalArima)
View(dados_total)
View(dados_aferese)
View(dados_total)
View(mdlTreinoSangueTotalNNETAR)
runApp()
accuracy(treinoSangueTotal, mdlTreinoSangueTotalRL$fitted.values)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalArima$fitted)
accuracy(treinoSangueTotal, prevTreinoSangueTotalSTFL$model$fitted)
accuracy(treinoSangueTotal, prevTreinoSangueTotalhwAdditive$model$fitted)
accuracy(treinoSangueTotal, prevTreinoSangueTotalhwMultiplicative$model$fitted)
accuracy(treinoSangueTotal, mdlTreinoSangueTotalNNETAR$fitted)
prevTreinoSangueTotalSTFL = stlf(treinoSangueTotal, h=19)
print(prevTreinoSangueTotalSTFL$model)
autoplot(prevTreinoSangueTotalSTFL$model)
shapiro.test(mdlTreinoSangueTotalArima$residuals)
shapiro.test(mdlTreinoSangueTotalRL$residuals)
shapiro.test(prevTreinoSangueTotalSTFL$residuals)
checkresiduals(mdlTreinoSangueTotalArima)
checkresiduals(mdlTreinoSangueTotalRL)
checkresiduals(prevTreinoSangueTotalSTFL$model)
prevTreinoSangueTotalRL = forecast(mdlTreinoSangueTotalRL, h=TotalMesesTeste)
prevTreinoSangueTotalArima = forecast(mdlTreinoSangueTotalArima, h=TotalMesesTeste)
prevTreinoSangueTotalNNETAR = forecast(mdlTreinoSangueTotalNNETAR, h=TotalMesesTeste)
accuracy(testeSangueTotal, prevTreinoTotalRL$mean)
autoplot(treinoSangueTotal, main = "Modelos ajustados") +
autolayer(mdlTreinoSangueTotalRL$fitted.values, series="TSLM") +
autolayer(mdlTreinoSangueTotalArima$fitted, series="ARIMA") +
autolayer(prevTreinoSangueTotalSTFL$model$fitted, series="ETS(M,N,N)") +
ggtitle("PREVISÕES COM AUTOPLOT E AUTOLAYER") +
xlab("Tempo") + ylab("Nº de bolsas")
plot(treinoSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas",col = "black")
lines(mdlTreinoSangueTotalRL$fitted.values, col="red")
lines(mdlTreinoSangueTotalArima$fitted, col="blue")
lines(prevTreinoSangueTotalSTFL$model$fitted, col="green")
legend("topright", legend = c("Real", "TSLM","ARIMA(0,1,2)","ETS(M,N,N)"), col = c("black","red","blue","green"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(treinoSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas",col = "black")
lines(mdlTreinoSangueTotalRL$fitted.values, col="red")
legend("topright", legend = c("Real", "TSLM"), col = c("black","red"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(treinoSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas",col = "black")
lines(mdlTreinoSangueTotalArima$fitted, col="blue")
legend("topright", legend = c("Real","ARIMA(0,1,2)"), col = c("black","blue"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(treinoSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas",col = "black")
lines(prevTreinoSangueTotalSTFL$model$fitted, col="green")
legend("topright", legend = c("Real","ETS(M,N,N)"), col = c("black","green"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(testeSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas", col = "black")
lines(prevTreinoSangueTotalRL$mean, col="red")
lines(prevTreinoSangueTotalArima$mean, col="blue")
lines(prevTreinoSangueTotalSTFL$mean, col="green")
legend("topright", legend = c("Real", "TSLM","ARIMA(0,1,2)","ETS(M,N,N)"), col = c("black","red","blue","green"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(testeSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas", col = "black")
lines(prevTreinoSangueTotalRL$mean, col="red")
legend("topright", legend = c("Real", "TSLM"), col =  c("black","red"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(testeSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas", col = "black")
lines(prevTreinoSangueTotalArima$mean, col="blue")
legend("topright", legend = c("Real","ARIMA(0,1,2)"), col = c("black","blue"), lty = 1:2,cex=0.8)
close.screen(all=T)
plot(testeSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas", col = "black")
lines(prevTreinoSangueTotalSTFL$mean, col="blue")
legend("topright", legend = c("Real","ETS(M,N,N)"), col = c("black","blue"), lty = 1:1,cex=0.8)
close.screen(all=T)
cores <- c("green","red")
autoplot(prevTreinoSangueTotalSTFL)
plot(prevTreinoSangueTotalSTFL, main = "Suavização exponencial - ETS(M,N,N)",
xlab = "Tempo",
ylab = "Nº de bolsas sangue total",
las = 1)
summary(prevTreinoSangueTotalRL$model)$adj.r.squared
summary(prevTreinoSangueTotalSTFL$model)$adj.r.squared
summary(prevTreinoSangueTotalArima$model)$adj.r.squared
stlTreinoSangueTotal = stl(treinoSangueTotal[,1], s.window = "periodic")
plot(stlTreinoSangueTotal)
stlTreinoSangueTotal
plot(testeSangueTotal, xlab = "Tempo", ylab = "Nº de bolsas", col = "black")
lines(prevTreinoSangueTotalRL$mean, col="red")
lines(prevTreinoSangueTotalArima$mean, col="blue")
lines(prevTreinoSangueTotalSTFL$mean, col="green")
legend("topright", legend = c("Real", "TSLM","ARIMA(0,1,2)","ETS(M,N,N)"), col = c("black","red","blue","green"), lty = 1:2,cex=0.8)
close.screen(all=T)
stlTreinoSangueTotal = stl(treinoSangueTotal[,1], s.window = "periodic")
plot(stlTreinoSangueTotal)
stlTreinoSangueTotal
plot(prevTreinoSangueTotalSTFL, main = "Suavização exponencial - ETS(M,N,N)",
xlab = "Tempo",
ylab = "Nº de bolsas sangue total",
las = 1)
runApp()
autoplot(prevTreinoSangueTotalSTFL)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
